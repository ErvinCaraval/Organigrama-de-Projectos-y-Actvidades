services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: WEB
    command: sh -c "sleep 10 && python manage.py runserver 0.0.0.0:8000"
    restart: always
    ports:
      - "8000:8000"
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - db
    volumes:
      - .:/code
    stdin_open: true
    tty: true
    networks:
      - backend

  db:
    build:
      context: .
      dockerfile: Dockerfile.db
    container_name: DB
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    restart: always
    ports:
      - "9000:9000"
    networks:
      - backend
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/${DB_NAME}
      - SONAR_JDBC_USERNAME=${DB_USER}
      - SONAR_JDBC_PASSWORD=${DB_PASSWORD}

  sonarscanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonarscanner
    depends_on:
      - sonarqube
    volumes:
      - .:/usr/src
    networks:
      - backend
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_LOGIN=sqp_89d3889c271e825b4f4064ec45472041350d044b  # Token de acceso a SonarQube

    entrypoint: ["/opt/sonar-scanner/bin/sonar-scanner"]

networks:
  backend:

volumes:
  db_data:
